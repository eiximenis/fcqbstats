// <auto-generated />
using System;
using FcbqStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FcbqStats.Migrations
{
    [DbContext(typeof(StatsDbContext))]
    [Migration("20250220180913_Stats")]
    partial class Stats
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("FcbqStats.Data.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClubCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("FcbqStats.Data.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocalTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocalTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatisticsFcbqSid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("StatisticsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FcbqStats.Data.MatchEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActorShirtNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Min")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MoveDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MoveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sec")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TeamAction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("FcbqStats.Data.PeriodStatistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Foults")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnePointAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnePointMade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnePointPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeriodIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StatisticsId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreePointAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreePointPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreePointsMade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TwoPointAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TwoPointPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TwoPointsMade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatisticsId1");

                    b.ToTable("PeriodStatistics");
                });

            modelBuilder.Entity("FcbqStats.Data.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FcbqStats.Data.Statistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FcbqSid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("FcbqStats.Data.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FcbqStats.Data.PeriodStatistics", b =>
                {
                    b.HasOne("FcbqStats.Data.Statistics", "Statistics")
                        .WithMany("PeriodStats")
                        .HasForeignKey("StatisticsId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("FcbqStats.Data.Statistics", b =>
                {
                    b.HasOne("FcbqStats.Data.Match", null)
                        .WithOne("Statistics")
                        .HasForeignKey("FcbqStats.Data.Statistics", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FcbqStats.Data.Team", b =>
                {
                    b.HasOne("FcbqStats.Data.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("FcbqStats.Data.Match", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("FcbqStats.Data.Statistics", b =>
                {
                    b.Navigation("PeriodStats");
                });
#pragma warning restore 612, 618
        }
    }
}
